# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data, id %in% list[-i])
testset <- subset(data, id %in% c(i))
# run a random forest model
mymodel <- randomForest(trainingset$Sepal.Length ~ ., data = trainingset, ntree = 100)
# remove response column 1, Sepal.Length
temp <- as.data.frame(predict(mymodel, testset[,-1]))
# append this iteration's predictions to the end of the prediction data frame
prediction <- rbind(prediction, temp)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy <- rbind(testsetCopy, as.data.frame(testset[,1]))
printf('> testcopy: %s\n', testsetCopy)
progress.bar$step()
}
View(testsetCopy)
View(testset)
View(prediction)
View(prediction)
View(testset)
testset[,1]
testset['Sepal.Length']
class(testset['Sepal.Length'])
class(testset[,1])
testset[,1]
testset[,c('Sepal.Length')]
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
source('~/Documents/work/cumc/bulk_training/learner.R')
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
ncol(testset)
ncol(trainingset)
source('/Users/pleiades/Documents/work/cumc/bulk_training/learner.R')
library(plyr)
# library(randomForest)
N_Train <- 5
N_Test <- 1
files_train <- getDataFiles(n_files=N_Train, mode='train')
files_test <- getDataFiles(n_files=N_Test, mode='test')
printf('\n> n_train: %d, n_test: %d\n', length(files_train), length(files_test))
# in this cross validation example, we use bulk training data set to
# predict the target infectious diseases from the other variables in the dataset
# with the logistic regression model
k = 5 #Folds
# sample from 1 to k, nrow times (the number of observations in the data)
# data$id <- sample(1:k, nrow(data), replace = TRUE)
list <- 1:k
# prediction and testset data frames that we add to with each iteration over
# the folds
prediction <- data.frame()
testsetCopy <- data.frame()
#Creating a progress bar to know the status of CV
progress.bar <- create_progress_bar("text")
progress.bar$init(k)
stopifnot(length(files_test) > 0)
testset = read.csv(file=files_test[1], head=TRUE, sep=",")
for (i in 1:k){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- read.csv(file=files_train[i], head=TRUE, sep=",")  # subset(data, id %in% list[-i])
printf('> loaded file: %s of dim (%d, %d)', files_train[i], nrow(files_train[i]), ncol(files_train[i]))
# run a random forest model
# need to remove id?
fit <- glm(trainingset$target ~ ., data = trainingset, family=binomial())
summary(fit) # display results
#   confint(fit) # 95% CI for the coefficients
#   exp(coef(fit)) # exponentiated coefficients
#   exp(confint(fit)) # 95% CI for exponentiated coefficients
#   predict(fit, type="response") # predicted values
#   residuals(fit, type="deviance") # residuals
# remove response column
drops <- c('target')
probs <- as.data.frame(predict(fit, testset[,!(names(testset) %in% drops)]))
# append this iteration's predictions to the end of the prediction data frame
prediction <- rbind(prediction, probs)
# append this iteration's test set to the test set copy data frame
# keep only the target Column
testsetCopy <- rbind(testsetCopy, as.data.frame(testset[,c('target')]))
progress.bar$step()
}
as.data.frame(testset[,c('target')])
head(as.data.frame(testset[,c('target')]))
nrow(testsetCopy)
nrow(predictoin)
nrow(prediction)
summary(fit)
?fit
dir(fit)
files_train
trainingset <- read.csv(file=files_train[0], head=TRUE, sep=",")
trainingset <- read.csv(file=files_train[1], head=TRUE, sep=",")
fit <- glm(trainingset$target ~ ., data = trainingset, family=binomial())
summary(fit)
confint(fit)
body(fit)
attributes(fit)
fit$rank
fit$coefficients
fit$fitted.values
attributes(fit)
fit$formula
fit$weights
?fit
dat <- data.frame(x = rnorm(10, 30, .2), y = runif(10, 3, 5))
scaled.dat <- scale(dat)
scaled.dat
dat <- scale(dat)
dat
dat
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
trainingset <- read.csv(file=files_train[1], head=TRUE, sep=",")
names(trainingset)
drops = c('target')
X = trainingset[,!(names(trainingset) %in% drops)]
names(X)
nrow(X)
y = trainingset[,drops]
nrow(y)
names(trainingset)
y <- trainingset[,c('target')]
nrow(y)
names(y)
y <- trainingset['target']
nrow(y)
names(y)
ncol(y)
X$target <- y$target
names(X)
ncol(X)
nrow(X)
X <- scale(X)
X <- trainingset[,!(names(trainingset) %in% meta)]
meta <- c('target')
X <- trainingset[,!(names(trainingset) %in% meta)]
y <- trainingset['target']
stopifnot(nrow(X)==nrow(y), ncol(y)==1, ncol(trainingset)==ncol(X)+1)
X <- scale(X)
head(X)
?apply
names(df)
class(scale(X))
data <- matrix(sample(1:1000,17*6), ncol=17,nrow=6)
head(data)
maxs <- apply(data, 2, max)
maxs
data$target <- c(0, 1, 1, 0, 1, 0)
names(data)
names(X)
names(y)
X <- trainingset[,!(names(trainingset) %in% meta)]
names(X)
r = list(X, y)
r
length(r)
ncol(r$X)
r[1]
head(r[1])
x, y = 1, 5
c(x, y) = c(1, 2)
?predict
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
source('~/Documents/work/cumc/bulk_training/learner-cv.R')
trainingset <- read.csv(file=files_train[1], head=TRUE, sep=",")
trainingset <- scale_minmax(trainingset)
head(trainingset)
fit <- glm(trainingset$target ~ ., data = trainingset, family=binomial())
summary(fit)
drops <- c('target')
probs <- as.data.frame(predict(fit, testset[,!(names(testset) %in% drops)]))
t <- testset[,!(names(testset) %in% drops)]
ncol(t)
names(t)
nrow(t)
attributes(fit)
fit$coefficients
head(trainingset)
install.packages("UpSetR")
movies <- read.csv( system.file("extdata", "movies.csv", package = "UpSetR"), header=T, sep=";" )
movies
head(movies)
.libPaths()
movies <- read.csv( system.file("extdata", "movies.csv", package = "UpSetR"), header=T, sep=";" )
head(movies)
.libP?
?
bb=matrix(letters[sample(1:20, 100, rep=TRUE)], nrow=20)
sample(1:20, 100, rep=TRUE)
length(sample(1:20, 100, rep=TRUE))
letters[sample(1:20, 100, rep=TRUE)]
bb
grep("b", bb)
bb[grep("b", bb)]
bb[1]
bb[5]
bb[6]
help.search('set')
require('sos')
install.packages('sos')
require('sos')
findFn("neural")
??list
list.files('.')
??package
??pack
help.search('package')
.libPaths('UpSetR')
.libPaths()
find.package('UpSetR')
list.files('/usr/local/Cellar/r/3.1.3/R.framework/Versions/3.1/Resources/library/UpSetR')
list.files('/usr/local/Cellar/r/3.1.3/R.framework/Versions/3.1/Resources/library/UpSetR/extdata')
library(UpSetR)
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"),
header = T, sep = ";")
upset(movies, nsets = 6, number.angles = 30, point.size = 5, name.size = 12,
line.size = 2)
list.files('/usr/local/Cellar/r/3.1.3/R.framework/Versions/3.1/Resources/library/UpSetR/Meta')
head(movies)
history
history()
list.files('/usr/local/Cellar/r/3.1.3/R.framework/Versions/3.1/Resources/library/UpSetR/extdata')
rootdir = '/Users/pleiades/Documents/work/cumc/bulk_training-analysis/overlap'
antiboolp = read.csv(file.path(rootdir, 'overlap-antibio.csv'))
head(antiboolp)
head(antiboolp, n=1)
antiboolp = read.csv(file.path(rootdir, 'overlap-antibio.csv'), header=T, sep=';')
head(antiboolp, n=1)
antiboolp = read.csv(file.path(rootdir, 'overlap-antibio.csv'), header=T, sep=';', check.names=FALSE)
head(antiboolp, n=1)
upset(mutations, sets = c(69134 62659 62814 60549 98220 61248 69133 81465 101588 132747 63377 62710 62713 60776 61458), sets.bar.color = "#56B4E9",
upset(mutations, sets = c('69134' '62659' '62814' '60549' '98220' '61248' '69133' '81465' '101588' '132747'), sets.bar.color = "#56B4E9",
upset(mutations, sets = c('69134', '62659', '62814', '60549', '98220', '61248', '69133', '81465', '101588', '132747'), sets.bar.color = "#56B4E9",
order.by = "freq", empty.intersections = "on")
library(UpSetR)
upset(mutations, sets = c('69134', '62659', '62814', '60549', '98220', '61248', '69133', '81465', '101588', '132747'), sets.bar.color = "#56B4E9", order.by = "freq", empty.intersections = "on")
upset(antiboolp, sets = c('69134', '62659', '62814', '60549', '98220', '61248', '69133', '81465', '101588', '132747'), sets.bar.color = "#56B4E9", order.by = "freq", empty.intersections = "on")
upset(antiboolp, sets = c(69134, 62659, 62814, 60549, 98220, 61248, 69133, 81465, 101588, 132747), sets.bar.color = "#56B4E9", order.by = "freq", empty.intersections = "on")
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=T, sep=";" )
upset(mutations, sets = c("PTEN", "TP53", "EGFR", "PIK3R1", "RB1"), sets.bar.color = "#56B4E9",
order.by = "freq", empty.intersections = "on")
header(mutations)
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=T, sep="," )
header(mutations)
mutations[0]
mutations
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=True, sep="," )
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=T, sep="," )
head(mutations)
antiboolp = read.csv(file.path(rootdir, 'overlap-antibio.csv'), header=T, sep=';')
head(antiboolp, n=2)
upset(mutations, sets = c('m69134', 'm62659', 'm62814', 'm60549', 'm98220', 'm61248', 'm69133', 'm81465', 'm101588', 'm132747'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on')
upset(antiboolp, sets = c('m69134', 'm62659', 'm62814', 'm60549', 'm98220', 'm61248', 'm69133', 'm81465', 'm101588', 'm132747'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on')
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on')
upset(antiboolp, number.angles = 30, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on')
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 12, number.angles = 30)
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 30)
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 35)
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 45)
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 30)
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 28)
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antiboolp, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
rootdir = '/Users/pleiades/Documents/work/cumc/bulk_training-analysis/overlap'
antibio2 = read.csv(file.path(rootdir, 'code_vs_features-antibio.csv'))
head(antibio2)
upset(antibio2, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
head(antibio2, n=1)
antiboolp = read.csv(file.path(rootdir, 'overlap-antibio.csv'), header=T, sep=';')
head(antibio2, n=1)
head(antibioolp, n=1)
head(antiboolp, n=1)
antibio2 = read.csv(file.path(rootdir, 'code_vs_features-antibio.csv'), header=T, sep=';', check.names=FALSE)
head(antibio2, n=2)
upset(antibio2, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
antibio2 = read.csv(file.path(rootdir, 'code_vs_features-antibio.csv'), header=T, sep=';', )
head(antibio2, n=2)
upset(antibio2, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
antibio2 = read.csv(file.path(rootdir, 'code_vs_features-antibio.csv'), header=T, sep=';', )
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
rootdir
antibio2 = read.csv(file.path(rootdir, 'code_vs_features-antibio.csv'), header=T, sep=';', )
nrow(antibio2)
header(antibio2, n=2)
head(antibio2, n=2)a
head(antibio2, n=2)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, sets=c('c034.0', 'c052.7', 'c130.7', 'c036.0', 'c130.0', 'c008.69', '053.79', 'c087.9', 'c008.61', 'c111.9'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(antibio2, sets=c('c034.0', 'c052.7', 'c130.7', 'c036.0', 'c130.0', 'c008.69', 'c053.79', 'c087.9', 'c008.61', 'c111.9'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
antibio2 = read.csv(file.path(rootdir, 'code_vs_features-antibio.csv'), header=T, sep=';', )
nrow(antibio2)
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27)
upset(movies, nsets = 6, number.angles = 30, point.size = 5, name.size = 12,
line.size = 2)
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"))
nrow(movies)
system.file("extdata", "movies.csv", package = "UpSetR")
ncol(movies)
nrow(movies, sep=';')
ncol(movies, sep=';')
header(movies)
head(movies)
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"), sep=';')
ncol(movies)
nrow(movies)
upset(movies, sets = c("Action", "Adventure", "Comedy", "Drama", "Mystery",
"Thriller", "Romance", "War", "Western"), mb.ratio = c(0.55, 0.45), order.by = "freq")
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, nsets=20, sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, nsets=15, sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by=('degree', 'frequency'), empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by=('degree' 'frequency'), empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, nsets=10, sets.bar.color = "#56B4E9", order.by=c('degree', 'frequency'), empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets.bar.color = "#56B4E9", order.by=c('degree', 'frequency'), empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(movies, sets = c("Action", "Adventure", "Comedy", "Drama", "Mystery",
"Thriller", "Romance", "War", "Western"), mb.ratio = c(0.55, 0.45), order.by = "freq")
upset(movies, sets = c("Action", "Adventure", "Comedy", "Drama", "Mystery",
"Thriller", "Romance", "War", "Western"), mb.ratio = c(0.55, 0.45), order.by = "degree")
upset(movies, sets = c("Action", "Adventure", "Comedy", "Drama", "Mystery",
"Thriller", "Romance", "War", "Western"), mb.ratio = c(0.55, 0.45), order.by = "degree", reverse=T)
upset(antibio2, nsets=12, sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c008.45', 'c011.93', 'c481', 'c036.0', 'c041.85', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c097.1', 'c123.1', 'c112.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c008.45', 'c011.93', 'c481', 'c036.0', 'c041.85', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c097.1', 'c123.1', 'c112.5'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c008.45', 'c011.93', 'c481', 'c036.0', 'c041.85', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c097.1', 'c123.1', 'c112.5'), sets.bar.color = "#56B4E9", order.by=c('freq', 'degree'), empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c008.45', 'c011.93', 'c481', 'c036.0', 'c041.85', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c097.1', 'c123.1', 'c112.5'), sets.bar.color = "#56B4E9", order.by=c('degree', 'freq'), empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c008.45', 'c011.93', 'c481', 'c036.0', 'c041.85', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c097.1', 'c123.1', 'c112.5'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, nsets=12, sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
s = c('c038.10', 'c038.11', 'c038.19', 'c038.2', 'c038.3', 'c038.0', 'c038.8', 'c038.43', 'c038.42', 'c038.40', 'c038.49')
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c038.10', 'c038.11', 'c038.19', 'c038.2', 'c038.3', 'c038.0', 'c038.8', 'c038.43', 'c038.42', 'c038.40', 'c038.49'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c038.10', 'c038.11', 'c038.19', 'c038.2', 'c038.3', 'c038.0', 'c038.8', 'c038.43', 'c038.42', 'c038.40', 'c038.49'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c038.10', 'c038.11', 'c038.19', 'c038.2', 'c038.3', 'c038.0', 'c038.8', 'c038.43', 'c038.42', 'c038.40', 'c038.49'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c041.9', 'c041.6', 'c041.7', 'c041.3', 'c041.89', 'c041.85', 'c041.19', 'c041.11', 'c041.02', 'c041.01', 'c041.00', 'c041.10'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c054.2', 'c054.10', 'c054.13', 'c054.79', 'c054.3', 'c054.11', 'c054.19'), sets.bar.color = "#56B4E9", order.by='freq', empty.intersections = 'on', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
help(upset)
upset(antibio2, sets=c('c054.2', 'c054.10', 'c054.13', 'c054.79', 'c054.3', 'c054.11', 'c054.19'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = None, point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c054.2', 'c054.10', 'c054.13', 'c054.79', 'c054.3', 'c054.11', 'c054.19'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c054.2', 'c054.10', 'c054.13', 'c054.79', 'c054.3', 'c054.11', 'c054.19'), sets.bar.color = "#56B4E9", order.by='degree', group.by='degree', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c054.2', 'c054.10', 'c054.13', 'c054.79', 'c054.3', 'c054.11', 'c054.19'), sets.bar.color = "#56B4E9", order.by='degree', group.by='sets', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
help(upset)
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = 'off', point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27,  mb.ratio = c(0.55, 0.45))
help(upset)
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=20, cutoff=2,mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=100, cutoff=2,mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=60, cutoff=1,mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=100, cutoff=10,mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by='degree', empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=50, cutoff=10,mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by=c('freq', 'degree'), empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=50, cutoff=10,mb.ratio = c(0.55, 0.45))
upset(antibio2, sets=c('c007.1', 'c011.93', 'c481', 'c036.0', 'c054.3', 'c133.0', 'c061', 'c070.51', 'c083.2', 'c094.9', 'c123.1', 'c117.5'), sets.bar.color = "#56B4E9", order.by=c('degree', 'freq'), empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=50, cutoff=10,mb.ratio = c(0.55, 0.45))
antibio3 = read.csv(file.path(rootdir, 'code_vs_features-antibio-110.csv'), header=T, sep=';', )
upset(antibio3, sets=c('Giargiasis (007.1)','P. Tuberculosis (011.93)','P. Pneumonia (481)','M. Meningitis (036.0)','H. Meningoencephalitis (054.3)','Scabies (133.0)','Dengue (061)','Hepatitis C (070.51)','Rickettsialpox (083.2)','Neurosyphilis (094.9)','Cysticercosis (123.1)','Crytococcosis (117.5)'), sets.bar.color = "#56B4E9", order.by=c('freq'), empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=50, cutoff=10,mb.ratio = c(0.55, 0.45))
head(antibio3)
antibio3 = read.csv(file.path(rootdir, 'code_vs_features-antibio-110.csv'), header=T, sep=';')
head(antibio3, n=1)
antibio3 = read.csv(file.path(rootdir, 'code_vs_features-antibio-110.csv'), header=T, sep=';', check.names=FALSE)
head(antibio3)
upset(antibio3, sets=c('Giargiasis (007.1)','P. Tuberculosis (011.93)','P. Pneumonia (481)','M. Meningitis (036.0)','H. Meningoencephalitis (054.3)','Scabies (133.0)','Dengue (061)','Hepatitis C (070.51)','Rickettsialpox (083.2)','Neurosyphilis (094.9)','Cysticercosis (123.1)','Crytococcosis (117.5)'), sets.bar.color = "#56B4E9", order.by=c('freq'), empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=50, cutoff=10,mb.ratio = c(0.55, 0.45))
upset(antibio3, sets=c('Giargiasis `(007.1`)','P. Tuberculosis `(011.93`)','P. Pneumonia `(481`)','M. Meningitis `(036.0`)','H. Meningoencephalitis `(054.3`)','Scabies `(133.0`)','Dengue `(061`)','Hepatitis C `(070.51`)','Rickettsialpox `(083.2`)','Neurosyphilis `(094.9`)','Cysticercosis `(123.1`)','Crytococcosis `(117.5`)'), sets.bar.color = "#56B4E9", order.by=c('freq'), empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=50, cutoff=10,mb.ratio = c(0.55, 0.45))
upset(antibio3, sets=c('Giargiasis (`007.1)`','P. Tuberculosis `(011.93)`','P. Pneumonia (481)','M. Meningitis (036.0)','H. Meningoencephalitis (054.3)','Scabies (133.0)','Dengue (061)','Hepatitis C (070.51)','Rickettsialpox (083.2)','Neurosyphilis (094.9)','Cysticercosis (123.1)','Crytococcosis (117.5)'), sets.bar.color = "#56B4E9", order.by=c('freq'), empty.intersections = NULL, point.size = 5, name.size = 10, number.angles = 27, nintersects=50, cutoff=10,mb.ratio = c(0.55, 0.45))
pchisqr(7.1, 3)
pchisq(7.1, 3)
install.packages('CluMax')
install.packages('CluMix')
install.packages('marray')
v
update.packages(ask=FALSE)
install.packages("stringi", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("stringr", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
update.packages()
install.packages("curl", lib="/usr/local/Cellar/r/3.1.3/R.framework/Versions/3.1/Resources/library")
library(cluster)
library(fpc)
install.packages('fpc')
g.dist = daisy(data, metric="gower", type=list(symm=2))
library(cluster)  # we'll use these packages
library(fpc)
# here we're generating 45 data in 3 clusters:
set.seed(3296)    # this makes the example exactly reproducible
n      = 15
cont   = c(rnorm(n, mean=0, sd=1),
rnorm(n, mean=1, sd=1),
rnorm(n, mean=2, sd=1) )
bin    = c(rbinom(n, size=1, prob=.2),
rbinom(n, size=1, prob=.5),
rbinom(n, size=1, prob=.8) )
ord    = c(rbinom(n, size=5, prob=.2),
rbinom(n, size=5, prob=.5),
rbinom(n, size=5, prob=.8) )
data   = data.frame(cont=cont, bin=bin, ord=factor(ord, ordered=TRUE))
# this returns the distance matrix with Gower's distance:
g.dist = daisy(data, metric="gower", type=list(symm=2))
source('~/.active-rstudio-document')
n      = 15
example(source)
getcwd()
list.files('.')
pwd()
pwed
pwd
library(cluster)  # we'll use these packages
library(fpc)
# here we're generating 45 data in 3 clusters:
set.seed(3296)    # this makes the example exactly reproducible
n      = 15
cont   = c(rnorm(n, mean=0, sd=1),
rnorm(n, mean=1, sd=1),
rnorm(n, mean=2, sd=1) )
bin    = c(rbinom(n, size=1, prob=.2),
rbinom(n, size=1, prob=.5),
rbinom(n, size=1, prob=.8) )
ord    = c(rbinom(n, size=5, prob=.2),
rbinom(n, size=5, prob=.5),
rbinom(n, size=5, prob=.8) )
data   = data.frame(cont=cont, bin=bin, ord=factor(ord, ordered=TRUE))
# this returns the distance matrix with Gower's distance:
g.dist = daisy(data, metric="gower", type=list(symm=2))
cont   = c(rnorm(n, mean=0, sd=1),
rnorm(n, mean=1, sd=1),
rnorm(n, mean=2, sd=1) )
bin    = c(rbinom(n, size=1, prob=.2),
rbinom(n, size=1, prob=.5),
rbinom(n, size=1, prob=.8) )
ord    = c(rbinom(n, size=5, prob=.2),
rbinom(n, size=5, prob=.5),
rbinom(n, size=5, prob=.8) )
data   = data.frame(cont=cont, bin=bin, ord=factor(ord, ordered=TRUE))
source('~/.active-rstudio-document', echo=TRUE)
source('gower-test.R')
cd
getwd()
setwd("/Users/pleiades/Documents/work/sprint/demo")
getwd()
source('gower-test.R')
g.dist
help(write.table)
x <- data.frame(a = I("a \" quote"), b = pi)
x
help(I)
write.table(x, file = "foo.csv", sep = ",", col.names = NA,
qmethod = "double")
write.csv(x, file = "foo.csv", row.names = FALSE)
x
library(cluster)  # we'll use these packages
library(fpc)
# here we're generating 45 data in 3 clusters:
set.seed(3296)    # this makes the example exactly reproducible
n      = 15
cont   = c(rnorm(n, mean=0, sd=1),
rnorm(n, mean=1, sd=1),
rnorm(n, mean=2, sd=1) )
bin    = c(rbinom(n, size=1, prob=.2),
rbinom(n, size=1, prob=.5),
rbinom(n, size=1, prob=.8) )
ord    = c(rbinom(n, size=5, prob=.2),
rbinom(n, size=5, prob=.5),
rbinom(n, size=5, prob=.8) )
data   = data.frame(cont=cont, bin=bin, ord=factor(ord, ordered=TRUE))
# this returns the distance matrix with Gower's distance:
g.dist = daisy(data, metric="gower", type=list(symm=2))
# write CSV
# write.csv(x, file = "foo.csv", row.names = FALSE)
# we can start by searching over different numbers of clusters with PAM:
pc = pamk(g.dist, krange=1:5, criterion="asw")
pc[2:3]
# $nc
# [1] 2                 # 2 clusters maximize the average silhouette width
#
# $crit
# [1] 0.0000000 0.6227580 0.5593053 0.5011497 0.4294626
pc = pc$pamobject;  pc  # this is the optimal PAM clustering
# Medoids:
#      ID
# [1,] "29" "29"
# [2,] "33" "33"
# Clustering vector:
#  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
#  1  1  1  1  1  2  1  1  1  1  1  2  1  2  1  2  2  1  1  1  2  1  2  1  2  2
# 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
#  1  2  1  2  2  1  2  2  2  2  1  2  1  2  2  2  2  2  2
# Objective function:
#     build      swap
# 0.1500934 0.1461762
#
# Available components:
# [1] "medoids"    "id.med"     "clustering" "objective"  "isolation"
# [6] "clusinfo"   "silinfo"    "diss"       "call"
dim(g.dist)
g.dist.shape
g.dist.nrow
type(g.dist)
d <- c(1,2,3,4)
e <- c("red", "white", "red", NA)
f <- c(TRUE,TRUE,TRUE,FALSE)
mydata <- data.frame(d,e,f)
names(mydata) <- c("ID","Color","Passed") # variable names
mydata
summary(g.dist)
pc
summary(data)
